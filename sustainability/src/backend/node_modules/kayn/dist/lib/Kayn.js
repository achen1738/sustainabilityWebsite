'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _riotRatelimiterTemp = require('riot-ratelimiter-temp');

var _riotRatelimiterTemp2 = _interopRequireDefault(_riotRatelimiterTemp);

var _lodash = require('lodash.merge');

var _lodash2 = _interopRequireDefault(_lodash);

var _Logger = require('./Logger');

var _Logger2 = _interopRequireDefault(_Logger);

var _ParameterHelper = require('./Utils/ParameterHelper');

var _ParameterHelper2 = _interopRequireDefault(_ParameterHelper);

var _ChallengerEndpoint = require('./Endpoints/LeagueEndpoint/ChallengerEndpoint');

var _ChallengerEndpoint2 = _interopRequireDefault(_ChallengerEndpoint);

var _ChampionMasteryEndpoint = require('./Endpoints/ChampionMasteryEndpoint');

var _ChampionMasteryEndpoint2 = _interopRequireDefault(_ChampionMasteryEndpoint);

var _ChampionRotationEndpoint = require('./Endpoints/ChampionRotationEndpoint');

var _ChampionRotationEndpoint2 = _interopRequireDefault(_ChampionRotationEndpoint);

var _CurrentGameEndpoint = require('./Endpoints/SpectatorEndpoint/CurrentGameEndpoint');

var _CurrentGameEndpoint2 = _interopRequireDefault(_CurrentGameEndpoint);

var _DDragonChampionEndpoint = require('./Endpoints/DDragonEndpoints/DDragonChampionEndpoint');

var _DDragonChampionEndpoint2 = _interopRequireDefault(_DDragonChampionEndpoint);

var _DDragonItemEndpoint = require('./Endpoints/DDragonEndpoints/DDragonItemEndpoint');

var _DDragonItemEndpoint2 = _interopRequireDefault(_DDragonItemEndpoint);

var _DDragonLanguageEndpoint = require('./Endpoints/DDragonEndpoints/DDragonLanguageEndpoint');

var _DDragonLanguageEndpoint2 = _interopRequireDefault(_DDragonLanguageEndpoint);

var _DDragonLanguageStringEndpoint = require('./Endpoints/DDragonEndpoints/DDragonLanguageStringEndpoint');

var _DDragonLanguageStringEndpoint2 = _interopRequireDefault(_DDragonLanguageStringEndpoint);

var _DDragonMapEndpoint = require('./Endpoints/DDragonEndpoints/DDragonMapEndpoint');

var _DDragonMapEndpoint2 = _interopRequireDefault(_DDragonMapEndpoint);

var _DDragonProfileIconEndpoint = require('./Endpoints/DDragonEndpoints/DDragonProfileIconEndpoint');

var _DDragonProfileIconEndpoint2 = _interopRequireDefault(_DDragonProfileIconEndpoint);

var _DDragonRealmEndpoint = require('./Endpoints/DDragonEndpoints/DDragonRealmEndpoint');

var _DDragonRealmEndpoint2 = _interopRequireDefault(_DDragonRealmEndpoint);

var _DDragonRunesReforgedEndpoint = require('./Endpoints/DDragonEndpoints/DDragonRunesReforgedEndpoint');

var _DDragonRunesReforgedEndpoint2 = _interopRequireDefault(_DDragonRunesReforgedEndpoint);

var _DDragonSummonerSpellEndpoint = require('./Endpoints/DDragonEndpoints/DDragonSummonerSpellEndpoint');

var _DDragonSummonerSpellEndpoint2 = _interopRequireDefault(_DDragonSummonerSpellEndpoint);

var _DDragonVersionEndpoint = require('./Endpoints/DDragonEndpoints/DDragonVersionEndpoint');

var _DDragonVersionEndpoint2 = _interopRequireDefault(_DDragonVersionEndpoint);

var _FeaturedGamesEndpoint = require('./Endpoints/SpectatorEndpoint/FeaturedGamesEndpoint');

var _FeaturedGamesEndpoint2 = _interopRequireDefault(_FeaturedGamesEndpoint);

var _LeagueEndpoint = require('./Endpoints/LeagueEndpoint/LeagueEndpoint');

var _LeagueEndpoint2 = _interopRequireDefault(_LeagueEndpoint);

var _LeaguePositionsEndpoint = require('./Endpoints/LeagueEndpoint/LeaguePositionsEndpoint');

var _LeaguePositionsEndpoint2 = _interopRequireDefault(_LeaguePositionsEndpoint);

var _MasterEndpoint = require('./Endpoints/LeagueEndpoint/MasterEndpoint');

var _MasterEndpoint2 = _interopRequireDefault(_MasterEndpoint);

var _MatchEndpoint = require('./Endpoints/MatchEndpoint/MatchEndpoint');

var _MatchEndpoint2 = _interopRequireDefault(_MatchEndpoint);

var _MatchlistEndpoint = require('./Endpoints/MatchEndpoint/MatchlistEndpoint');

var _MatchlistEndpoint2 = _interopRequireDefault(_MatchlistEndpoint);

var _StatusEndpoint = require('./Endpoints/StatusEndpoint');

var _StatusEndpoint2 = _interopRequireDefault(_StatusEndpoint);

var _SummonerEndpoint = require('./Endpoints/SummonerEndpoint');

var _SummonerEndpoint2 = _interopRequireDefault(_SummonerEndpoint);

var _ThirdPartyCodeEndpoint = require('./Endpoints/ThirdPartyCodeEndpoint');

var _ThirdPartyCodeEndpoint2 = _interopRequireDefault(_ThirdPartyCodeEndpoint);

var _TournamentStubEndpoint = require('./Endpoints/TournamentStubEndpoint');

var _TournamentStubEndpoint2 = _interopRequireDefault(_TournamentStubEndpoint);

var _TournamentEndpoint = require('./Endpoints/TournamentEndpoint');

var _TournamentEndpoint2 = _interopRequireDefault(_TournamentEndpoint);

var _ChallengerEndpointV = require('./Endpoints/LeagueEndpoint/ChallengerEndpointV4');

var _ChallengerEndpointV2 = _interopRequireDefault(_ChallengerEndpointV);

var _ChampionMasteryEndpointV = require('./Endpoints/ChampionMasteryEndpointV4');

var _ChampionMasteryEndpointV2 = _interopRequireDefault(_ChampionMasteryEndpointV);

var _CurrentGameEndpointV = require('./Endpoints/SpectatorEndpoint/CurrentGameEndpointV4');

var _CurrentGameEndpointV2 = _interopRequireDefault(_CurrentGameEndpointV);

var _FeaturedGamesEndpointV = require('./Endpoints/SpectatorEndpoint/FeaturedGamesEndpointV4');

var _FeaturedGamesEndpointV2 = _interopRequireDefault(_FeaturedGamesEndpointV);

var _GrandmasterEndpointV = require('./Endpoints/LeagueEndpoint/GrandmasterEndpointV4');

var _GrandmasterEndpointV2 = _interopRequireDefault(_GrandmasterEndpointV);

var _LeagueEndpointV = require('./Endpoints/LeagueEndpoint/LeagueEndpointV4');

var _LeagueEndpointV2 = _interopRequireDefault(_LeagueEndpointV);

var _LeaguePositionsEndpointV = require('./Endpoints/LeagueEndpoint/LeaguePositionsEndpointV4');

var _LeaguePositionsEndpointV2 = _interopRequireDefault(_LeaguePositionsEndpointV);

var _MasterEndpointV = require('./Endpoints/LeagueEndpoint/MasterEndpointV4');

var _MasterEndpointV2 = _interopRequireDefault(_MasterEndpointV);

var _MatchEndpointV = require('./Endpoints/MatchEndpoint/MatchEndpointV4');

var _MatchEndpointV2 = _interopRequireDefault(_MatchEndpointV);

var _MatchlistEndpointV = require('./Endpoints/MatchEndpoint/MatchlistEndpointV4');

var _MatchlistEndpointV2 = _interopRequireDefault(_MatchlistEndpointV);

var _SummonerEndpointV = require('./Endpoints/SummonerEndpointV4');

var _SummonerEndpointV2 = _interopRequireDefault(_SummonerEndpointV);

var _ThirdPartyCodeEndpointV = require('./Endpoints/ThirdPartyCodeEndpointV4');

var _ThirdPartyCodeEndpointV2 = _interopRequireDefault(_ThirdPartyCodeEndpointV);

var _defaultTtls = require('./Enums/default-ttls');

var _defaultTtls2 = _interopRequireDefault(_defaultTtls);

var _KaynConfig = require('./KaynConfig');

var _regions = require('./Enums/regions');

var _regions2 = _interopRequireDefault(_regions);

var _methodNames = require('./Enums/method-names');

var _methodNames2 = _interopRequireDefault(_methodNames);

var _BasicJSCache = require('./Caches/BasicJSCache');

var _BasicJSCache2 = _interopRequireDefault(_BasicJSCache);

var _LRUCache = require('./Caches/LRUCache');

var _LRUCache2 = _interopRequireDefault(_LRUCache);

var _RedisCache = require('./Caches/RedisCache');

var _RedisCache2 = _interopRequireDefault(_RedisCache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('dotenv').config();

const RRLStrategies = require('riot-ratelimiter-temp/dist/RateLimiter').STRATEGY;

class Kayn {
    constructor(key = process.env.RIOT_LOL_API_KEY, config = _KaynConfig.DEFAULT_KAYN_CONFIG) {
        if (!_ParameterHelper2.default.isKeyValid(key)) {
            throw new Error('Failed to initialize Kayn! API key is not a non-empty string.');
        }

        // Make sure that the rest of the sane, nested defaults are set.
        // The source object here is the user config,
        // while the destination is the default config.
        // Extra merge is used to prevent mutation of original default config.
        // Merge is needed for deep-merging.
        this.config = (0, _KaynConfig.KAYN_CONFIG_STRUCT)((0, _lodash2.default)((0, _lodash2.default)({}, _KaynConfig.DEFAULT_KAYN_CONFIG), _extends({ key }, config)));

        const strategy = this.config.requestOptions.burst ? RRLStrategies.BURST : RRLStrategies.SPREAD;

        this.limiter = new _riotRatelimiterTemp2.default({
            strategy
        });

        if (this.config.debugOptions.isEnabled) {
            // Not pure but whatever.
            const configCopy = _extends({}, this.config);
            if (!configCopy.debugOptions.showKey) {
                delete configCopy.key;
            }
            (0, _Logger2.default)(this.config);
            this.config.debugOptions.loggers.initLogger('with config:\n%O', configCopy);
        }

        // Handle caching time-to-lives.
        if (this.config.cacheOptions.cache) {
            /*
                Start by checking if default is used. If so, set it.
                Next, merge grouped ttls and then singular ttls.
                Finally, merge final, old `ttls` prop for backwards-compatibility.
                We use this as the source of truth for cache ttls.
            */
            let finalTTLs = {};
            if (this.config.cacheOptions.timeToLives.useDefault) {
                finalTTLs = (0, _lodash2.default)(finalTTLs, _defaultTtls2.default);
            }
            finalTTLs = (0, _lodash2.default)(finalTTLs, (0, _defaultTtls.makeTTLsFromGroupedTTLs)(this.config.cacheOptions.timeToLives.byGroup), this.config.cacheOptions.timeToLives.byMethod, this.config.cacheOptions.ttls);
            this.config.cacheOptions.ttls = finalTTLs;
        }

        // Set up interfaces.
        this.Challenger = new _ChallengerEndpoint2.default(this.config, this.limiter);
        this.ChampionMastery = new _ChampionMasteryEndpoint2.default(this.config, this.limiter);
        // Did not mean to have this as ChampionRotation, but I'll keep it just in case people are using it.
        // Use Champion.Rotation.list instead.
        this.ChampionRotation = new _ChampionRotationEndpoint2.default(this.config, this.limiter);
        this.Champion = {};
        this.Champion.Rotation = this.ChampionRotation;
        this.CurrentGame = new _CurrentGameEndpoint2.default(this.config, this.limiter);
        this.DDragon = {
            Champion: new _DDragonChampionEndpoint2.default(this.config),
            Item: new _DDragonItemEndpoint2.default(this.config),
            Language: new _DDragonLanguageEndpoint2.default(this.config),
            LanguageString: new _DDragonLanguageStringEndpoint2.default(this.config),
            Map: new _DDragonMapEndpoint2.default(this.config),
            ProfileIcon: new _DDragonProfileIconEndpoint2.default(this.config),
            Realm: new _DDragonRealmEndpoint2.default(this.config),
            RunesReforged: new _DDragonRunesReforgedEndpoint2.default(this.config),
            SummonerSpell: new _DDragonSummonerSpellEndpoint2.default(this.config),
            Version: new _DDragonVersionEndpoint2.default(this.config)
        };
        this.FeaturedGames = new _FeaturedGamesEndpoint2.default(this.config, this.limiter);
        this.League = new _LeagueEndpoint2.default(this.config, this.limiter);
        this.LeaguePositions = new _LeaguePositionsEndpoint2.default(this.config, this.limiter);
        this.Master = new _MasterEndpoint2.default(this.config, this.limiter);
        this.Match = new _MatchEndpoint2.default(this.config, this.limiter);
        this.Matchlist = new _MatchlistEndpoint2.default(this.config, this.limiter);
        this.Summoner = new _SummonerEndpoint2.default(this.config, this.limiter);
        this.Status = new _StatusEndpoint2.default(this.config, this.limiter);
        this.ThirdPartyCode = new _ThirdPartyCodeEndpoint2.default(this.config, this.limiter);
        this.TournamentStub = new _TournamentStubEndpoint2.default(this.config, this.limiter);
        this.Tournament = new _TournamentEndpoint2.default(this.config, this.limiter);

        this.ChallengerV4 = new _ChallengerEndpointV2.default(this.config, this.limiter);
        this.ChampionMasteryV4 = new _ChampionMasteryEndpointV2.default(this.config, this.limiter);
        this.CurrentGameV4 = new _CurrentGameEndpointV2.default(this.config, this.limiter);
        this.FeaturedGamesV4 = new _FeaturedGamesEndpointV2.default(this.config, this.limiter);
        this.GrandmasterV4 = new _GrandmasterEndpointV2.default(this.config, this.limiter);
        this.LeagueV4 = new _LeagueEndpointV2.default(this.config, this.limiter);
        this.LeaguePositionsV4 = new _LeaguePositionsEndpointV2.default(this.config, this.limiter);
        this.MasterV4 = new _MasterEndpointV2.default(this.config, this.limiter);
        this.MatchV4 = new _MatchEndpointV2.default(this.config, this.limiter);
        this.MatchlistV4 = new _MatchlistEndpointV2.default(this.config, this.limiter);
        this.SummonerV4 = new _SummonerEndpointV2.default(this.config, this.limiter);
        this.ThirdPartyCodeV4 = new _ThirdPartyCodeEndpointV2.default(this.config, this.limiter);

        if (this.config.debugOptions.isEnabled) {
            this.config.debugOptions.loggers.initLogger('Initialized interfaces. Ready!');
        }

        console.warn(`
            WARNING: Please be aware that the V3 endpoints will be deprecated by January 14th, 2019.
            Most (or all) the endpoints will be upgraded to V4. This is problematic because summoner ID's
            will be encrypted uniquely per developer, which obsoletes our existing summoner ID's. We also
            need to adjust our code to use \`puuid\` instead of \`summonerId\` and \'accountId\'.
            This, however, does come with benefits that I won't explain here.

            This deprecation warning is on initialization since it's more significant than the past method deprecations.

            Regardless, \'kayn\' will attempt to be ready a month earlier.

            To read more, see here: https://discussion.developer.riotgames.com/articles/6579/player-universally-unique-identifiers-and-a-new-se.html
            To follow development progress, see here: https://github.com/cnguy/kayn/issues/55
        `);
    }

    flushCache(cb) {
        return new Promise((resolve, reject) => {
            if (!cb) {
                cb = (err, data) => err ? reject(err) : resolve(data);
            }
            this.config.cacheOptions.cache.flushCache(cb);
        });
    }
}

const init = key => config => new Kayn(key, config);

module.exports = {
    Kayn: init,
    REGIONS: _regions2.default,
    METHOD_NAMES: _methodNames2.default,
    BasicJSCache: _BasicJSCache2.default,
    LRUCache: _LRUCache2.default,
    RedisCache: _RedisCache2.default
};