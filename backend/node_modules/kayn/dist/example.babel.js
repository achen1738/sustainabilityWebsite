'use strict';

var _ = require('./');

var _helperForUpdatingSummonerToV = require('./examples/async.await/v4/helper-for-updating-summoner-to-v4');

var _helperForUpdatingSummonerToV2 = _interopRequireDefault(_helperForUpdatingSummonerToV);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _asyncToGenerator(fn) {
    return function () {
        var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {
            function step(key, arg) {
                try {
                    var info = gen[key](arg);var value = info.value;
                } catch (error) {
                    reject(error);return;
                }if (info.done) {
                    resolve(value);
                } else {
                    return Promise.resolve(value).then(function (value) {
                        step("next", value);
                    }, function (err) {
                        step("throw", err);
                    });
                }
            }return step("next");
        });
    };
}

/*
const redisCache = new RedisCache({
    host: 'localhost',
    port: 5000,
    keyPrefix: 'kayn',
});
*/

const myCache = new _.LRUCache({ max: 5 });

const kayn = (0, _.Kayn)()({
    region: 'na',
    debugOptions: {
        isEnabled: true,
        showKey: false
    },
    requestOptions: {
        shouldRetry: true,
        numberOfRetriesBeforeAbort: 3,
        delayBeforeRetry: 1000
    },
    cacheOptions: {
        cache: myCache,
        ttls: {},
        timeToLives: {
            useDefault: true,
            byGroup: {
                DDRAGON: 10000
            },
            byMethod: {
                [_.METHOD_NAMES.DDRAGON.RUNES_REFORGED_LIST]: 5000,
                [_.METHOD_NAMES.CHAMPION.GET_CHAMPION_ROTATIONS]: 5000
            }
        }
    }
});

const main = (() => {
    var _ref = _asyncToGenerator(function* () {
        const contractz = yield kayn.SummonerV4.by.name('Contractz');
        const contractz2 = yield kayn.SummonerV4.by.puuid(contractz.puuid);
        const contractz3 = yield kayn.SummonerV4.by.accountID(contractz2.accountId);
        const contractz4 = yield kayn.SummonerV4.by.id(contractz3.id);
        console.log(contractz4);
        const challengers = yield kayn.ChallengerV4.list('RANKED_SOLO_5x5');
        console.log(challengers);
        const grandmasters = yield kayn.GrandmasterV4.list('RANKED_SOLO_5x5');
        const inori = yield kayn.SummonerV4.by.name('Ã¬nori');
        console.log(inori);
        console.log((yield kayn.MatchlistV4.by.accountID(inori.accountId).query({ season: 11 })).matches[0]);
        const featuredGames = yield kayn.FeaturedGamesV4.list();
        const summoner = yield kayn.SummonerV4.by.name(featuredGames.gameList[0].participants[0].summonerName);
        const currentGame = yield kayn.CurrentGameV4.by.summonerID(summoner.id);
        console.log(currentGame);
        const chau = yield kayn.SummonerV4.by.name('9 5 mcdonalds');
        console.log(chau.id);
        // const code = await kayn.ThirdPartyCodeV4.by.summonerID(chau.id) // should be 404
        (0, _helperForUpdatingSummonerToV2.default)(kayn);
    });

    return function main() {
        return _ref.apply(this, arguments);
    };
})();

main();